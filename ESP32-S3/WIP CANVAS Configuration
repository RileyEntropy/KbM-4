Betaflight Configurator communicates with flight controllers (like those running Betaflight firmware) through a USB or UART serial interface, using a specific communication protocol based on the MultiWii Serial Protocol (MSP). Here's how the Betaflight Configurator works in detail and how you can emulate this connection for a custom controller with an ESP32:

1. Communication Protocol (MSP - MultiWii Serial Protocol)
Betaflight uses the MSP (MultiWii Serial Protocol), which is a lightweight, binary protocol designed for efficient communication between a flight controller and a client (like Betaflight Configurator).
MSP sends and receives structured binary data. Each message begins with a header followed by a payload (data) and a checksum.
Structure of MSP Messages:
Header: $M
Direction: < for incoming data (controller → configurator) or > for outgoing data (configurator → controller).
Length: Number of bytes in the payload.
Command: The type of data or action (e.g., MSP_STATUS, MSP_PID, etc.).
Payload: The actual data to be transferred.
Checksum: A simple XOR checksum to verify data integrity.
2. Flight Controller Settings and Data Storage
The flight controller's settings (e.g., PIDs, rates, etc.) are typically stored in EEPROM or flash memory on the controller.
When Betaflight Configurator connects, it requests this data using MSP commands, the flight controller reads it from memory, and sends it back over the serial connection.
The configurator can then display this data in the UI, allowing the user to modify it. When changes are made, the configurator sends the updated settings back to the flight controller, which then stores the new data.
3. Betaflight Configurator Components
UI/Frontend: Built using JavaScript and HTML/CSS, the frontend communicates with the backend and displays data to the user.
Serial Communication: The configurator establishes a serial connection using a USB-to-UART interface or native USB port. The backend manages the serial port connection.
MSP Messages: The frontend sends MSP commands via the serial port, and the backend translates these into data requests or updates to the flight controller.
4. How You Can Emulate this for an ESP32 Controller
To emulate Betaflight Configurator’s connection style with an ESP32 custom controller, you need to set up a communication protocol (which can be MSP-like) and ensure that the ESP32 can handle serial communication and store settings.

Steps to Implement the Connection Style:
Define Communication Protocol:

You can adopt a protocol similar to MSP. For example:
Define commands like CMD_GET_SETTINGS, CMD_SET_SETTINGS, CMD_STATUS, etc.
Use a structured binary protocol with a header, payload length, and checksum.
Ensure commands can request and update configuration settings, just like Betaflight.
ESP32 Serial Interface:

ESP32 can use USB (via its built-in USB functionality) or UART (if wired directly) to connect to a configurator.
You will need to implement serial communication using the Serial library for ESP32.
Store and Retrieve Settings on ESP32:

Use EEPROM or NVS (Non-Volatile Storage) in ESP32 to store the settings for your custom controller.
On receiving a request (like CMD_GET_SETTINGS), retrieve the data from storage and send it back.
When settings are updated from the configurator (using CMD_SET_SETTINGS), write the new data to the storage.
Frontend (Configurator):

The configurator can be a desktop application using Electron.js (JavaScript + HTML) or a Python-based app.
Use a serial communication library (e.g., serialport for Node.js or pyserial for Python) to communicate with the ESP32 via USB.
Implement UI components (like sliders, buttons, etc.) that map to your custom controller settings.
Example Flow:

Configurator Initiates Connection: The configurator opens a serial connection to the ESP32.
Request Settings: The configurator sends a CMD_GET_SETTINGS command. The ESP32 responds with the current configuration data (e.g., joystick calibration, button mappings).
Display Settings in UI: The configurator shows the settings in a form or graphical interface where the user can adjust them.
Send Updated Settings: When the user updates a setting (e.g., changes the joystick sensitivity), the configurator sends a CMD_SET_SETTINGS command with the new data. The ESP32 receives this and writes the new values to EEPROM/NVS.
Sample Implementation on ESP32

#include <EEPROM.h>
#include <HardwareSerial.h>

#define CMD_GET_SETTINGS 0x01
#define CMD_SET_SETTINGS 0x02

struct ControllerSettings {
  int joystick_sensitivity;
  int button_mapping;
};

ControllerSettings settings;

void setup() {
  Serial.begin(115200);
  EEPROM.begin(512);  // Initialize EEPROM

  // Load settings from EEPROM
  EEPROM.get(0, settings);
  if (settings.joystick_sensitivity == 0) {
    settings.joystick_sensitivity = 10;  // Default values
  }

  Serial.println("Controller Initialized.");
}

void loop() {
  if (Serial.available() > 0) {
    uint8_t command = Serial.read();
    switch (command) {
      case CMD_GET_SETTINGS:
        sendSettings();
        break;
      case CMD_SET_SETTINGS:
        receiveSettings();
        break;
    }
  }
}

void sendSettings() {
  Serial.write((uint8_t *)&settings, sizeof(settings));  // Send settings as binary
}

void receiveSettings() {
  if (Serial.available() >= sizeof(settings)) {
    Serial.readBytes((char *)&settings, sizeof(settings));  // Receive new settings
    EEPROM.put(0, settings);  // Save to EEPROM
    EEPROM.commit();
    Serial.println("Settings updated.");
  }
}
